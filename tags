!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFLAG	makefile	/^CFLAG = -Wall$/;"	m
CLEAR	makefile	/^CLEAR=\\033[H\\033[J$/;"	m
DEMO_OBJS	makefile	/^DEMO_OBJS = $(patsubst %.c,%.o,$(DEMO_SOURCE))$/;"	m
DEMO_SOURCE	makefile	/^DEMO_SOURCE = $(wildcard demo\/*.c)$/;"	m
DEMO_TARGETS	makefile	/^DEMO_TARGETS = $(patsubst %.c,%,$(notdir $(DEMO_SOURCE)))$/;"	m
FAILURE_COLOR	makefile	/^FAILURE_COLOR=\\033[1;31m$/;"	m
HLIST_HEAD	src/list.h	395;"	d
HLIST_HEAD_INIT	src/list.h	394;"	d
INIT_HLIST_HEAD	src/list.h	396;"	d
INIT_HLIST_NODE	src/list.c	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f	file:
INIT_LIST_HEAD	src/list.c	/^void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIBOBJS	makefile	/^LIBOBJS = $(patsubst %.c,%.o,$(SOURCE)) $/;"	m
LIST_HEAD	src/list.h	24;"	d
LIST_HEAD_INIT	src/list.h	22;"	d
OBJSDIR	makefile	/^OBJSDIR = .objs$/;"	m
OFFSET	makefile	/^OFFSET=\\033[41G$/;"	m
RB_BLACK	src/rbtree.h	107;"	d
RB_CLEAR_NODE	src/rbtree.h	140;"	d
RB_EMPTY_NODE	src/rbtree.h	139;"	d
RB_EMPTY_ROOT	src/rbtree.h	138;"	d
RB_RED	src/rbtree.h	106;"	d
RB_ROOT	src/rbtree.h	135;"	d
RESET	makefile	/^RESET=\\033[0m$/;"	m
SOURCE	makefile	/^SOURCE = $(wildcard src\/*.c)$/;"	m
SUCCESS_COLOR	makefile	/^SUCCESS_COLOR=\\033[1;34m$/;"	m
TARGETS	makefile	/^TARGETS = libtrumpet.a$/;"	m
_LINUX_LIST_H	src/list.h	2;"	d
_LINUX_RBTREE_H	src/rbtree.h	95;"	d
__hlist_del	src/list.c	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f	file:
__list_add	src/list.c	/^static inline void __list_add(struct list_head *new,$/;"	f	file:
__list_cut_position	src/list.c	/^static inline void __list_cut_position(struct list_head *list,$/;"	f	file:
__list_del	src/list.c	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f	file:
__list_for_each	src/list.h	211;"	d
__list_splice	src/list.c	/^static inline void __list_splice(const struct list_head *list,$/;"	f	file:
__rb_erase_color	src/rbtree.c	/^static void __rb_erase_color(struct rb_node *node, struct rb_node *parent,$/;"	f	file:
__rb_rotate_left	src/rbtree.c	/^static void __rb_rotate_left(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__rb_rotate_right	src/rbtree.c	/^static void __rb_rotate_right(struct rb_node *node, struct rb_root *root)$/;"	f	file:
add_to_list	demo/insertion_sort.c	/^void add_to_list(struct marathon_result* mr, struct list_head* header) {$/;"	f
airline	demo/myrbt.c	/^struct airline{$/;"	s	file:
airline	test/myrbt.c	/^struct airline{$/;"	s	file:
container_of	src/trumpet.h	15;"	d
first	src/list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
hlist_add_after	src/list.c	/^void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	src/list.c	/^void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	src/list.c	/^void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	src/list.c	/^void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	src/list.c	/^void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	src/list.c	/^int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	src/list.h	419;"	d
hlist_for_each	src/list.h	421;"	d
hlist_for_each_entry	src/list.h	436;"	d
hlist_for_each_entry_continue	src/list.h	448;"	d
hlist_for_each_entry_from	src/list.h	460;"	d
hlist_for_each_entry_safe	src/list.h	473;"	d
hlist_for_each_safe	src/list.h	425;"	d
hlist_head	src/list.h	/^struct hlist_head {$/;"	s
hlist_move_list	src/list.c	/^void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	src/list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	src/list.c	/^int hlist_unhashed(const struct hlist_node *h)$/;"	f
key	demo/myrbt.c	/^    int key;$/;"	m	struct:airline	file:
key	demo/myrbt.c	/^    int key;$/;"	m	struct:mytype	file:
key	test/myrbt.c	/^    int key;$/;"	m	struct:airline	file:
key	test/myrbt.c	/^    int key;$/;"	m	struct:mytype	file:
list_add	src/list.c	/^void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	src/list.c	/^void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	src/list.c	/^void list_cut_position(struct list_head *list,$/;"	f
list_del	src/list.c	/^void list_del(struct list_head *entry)$/;"	f
list_del_init	src/list.c	/^void list_del_init(struct list_head *entry)$/;"	f
list_empty	src/list.c	/^int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	src/list.c	/^int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	src/list.h	178;"	d
list_first_entry	src/list.h	189;"	d
list_for_each	src/list.h	197;"	d
list_for_each_entry	src/list.h	250;"	d
list_for_each_entry_continue	src/list.h	286;"	d
list_for_each_entry_continue_reverse	src/list.h	300;"	d
list_for_each_entry_from	src/list.h	313;"	d
list_for_each_entry_reverse	src/list.h	261;"	d
list_for_each_entry_safe	src/list.h	324;"	d
list_for_each_entry_safe_continue	src/list.h	340;"	d
list_for_each_entry_safe_from	src/list.h	356;"	d
list_for_each_entry_safe_reverse	src/list.h	371;"	d
list_for_each_prev	src/list.h	219;"	d
list_for_each_prev_safe	src/list.h	239;"	d
list_for_each_safe	src/list.h	229;"	d
list_head	src/list.h	/^struct list_head {$/;"	s
list_is_last	src/list.c	/^int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	src/list.c	/^int list_is_singular(const struct list_head *head)$/;"	f
list_move	src/list.c	/^void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	src/list.c	/^void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	src/list.h	274;"	d
list_replace	src/list.c	/^void list_replace(struct list_head *old,$/;"	f
list_replace_init	src/list.c	/^void list_replace_init(struct list_head *old,$/;"	f
list_splice	src/list.c	/^void list_splice(const struct list_head *list,$/;"	f
list_splice_init	src/list.c	/^void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	src/list.c	/^void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	src/list.c	/^void list_splice_tail_init(struct list_head *list,$/;"	f
main	demo/insertion_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	demo/myrbt.c	/^int main(int argc, char *argv[]) {$/;"	f
main	test/myrbt.c	/^int main(int argc, char *argv[]) {$/;"	f
marathon_result	demo/insertion_sort.c	/^struct marathon_result{$/;"	s	file:
mytype	demo/myrbt.c	/^struct mytype{$/;"	s	file:
mytype	test/myrbt.c	/^struct mytype{$/;"	s	file:
next	src/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	src/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	demo/insertion_sort.c	/^    struct list_head node;$/;"	m	struct:marathon_result	typeref:struct:marathon_result::list_head	file:
node	demo/myrbt.c	/^    struct list_head node;$/;"	m	struct:airline	typeref:struct:airline::list_head	file:
node	demo/myrbt.c	/^    struct rb_node node;$/;"	m	struct:mytype	typeref:struct:mytype::rb_node	file:
node	test/myrbt.c	/^    struct list_head node;$/;"	m	struct:airline	typeref:struct:airline::list_head	file:
node	test/myrbt.c	/^    struct rb_node node;$/;"	m	struct:mytype	typeref:struct:mytype::rb_node	file:
offsetof	src/trumpet.h	11;"	d
player	demo/insertion_sort.c	/^    char player[100];$/;"	m	struct:marathon_result	file:
pprev	src/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prefetch	src/list.h	6;"	d
prev	src/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
rb_color	src/rbtree.h	120;"	d
rb_entry	src/rbtree.h	136;"	d
rb_erase	src/rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_first	src/rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_insert_color	src/rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	src/rbtree.h	122;"	d
rb_is_red	src/rbtree.h	121;"	d
rb_last	src/rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	src/rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_link_node	src/rbtree.h	/^static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,$/;"	f
rb_next	src/rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_node	src/rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	src/rbtree.h	/^struct rb_node$/;"	s
rb_parent	src/rbtree.h	119;"	d
rb_parent_color	src/rbtree.h	/^	unsigned long  rb_parent_color;$/;"	m	struct:rb_node
rb_prev	src/rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_replace_node	src/rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new,$/;"	f
rb_right	src/rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	src/rbtree.h	/^struct rb_root$/;"	s
rb_set_black	src/rbtree.h	124;"	d
rb_set_color	src/rbtree.h	/^static inline void rb_set_color(struct rb_node *rb, int color)$/;"	f
rb_set_parent	src/rbtree.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_red	src/rbtree.h	123;"	d
result_in_sec	demo/insertion_sort.c	/^    int result_in_sec;$/;"	m	struct:marathon_result	file:
